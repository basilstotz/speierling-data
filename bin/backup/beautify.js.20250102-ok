#!/usr/bin/env node

function beautifyFeature(feature){

    let gebiet="";
    let ort="";

    let beautify=feature.properties.beautify={ update: [], create: []}
        
    let tags=feature.properties.tags;

    // add elevation and mominatim to tags

    if(feature.geometry.coordinates[2]){
	if(tags.elevation){
	    if(Math.round(feature.geometry.coordinates[2])!=tags.elevation){
		tags.elevation=Math.round(feature.geometry.coordinates[2]);
		beautify.update.push("elevation");
	    }   
	}else{
	    tags.elevation=Math.round(feature.geometry.coordinates[2]);
	    beautify.create.push("elevation");
	}
    }

    //to be removed
    if(tags.nominatim){
	if(feature.properties.nominatim.display_name!=tags.nominatim){
            tags.nominatim=feature.properties.nominatim.display_name
	    beautify.update.push("nominatim");
	}   
    }else{
	tags.nominatim=feature.properties.nominatim.display_name
	beautify.create.push("nominatim");
    }

    //to be removed ?????
    if(tags.user){
	if(feature.properties.meta.user!=tags.user){
            tags.user=feature.properties.meta.user
	    beautify.update.push("user");
	}   
    }else{
	tags.user=feature.properties.meta.user
	beautify.create.push("user");
    }

    
    if(feature.properties.pictures_url_prefix){
	if(tags.media){
	    if(feature.properties.pictures_url_prefix+"media.json"!=tags.media){
		tags.media=feature.properties.pictures_url_prefix+"media.json"
		beautify.update.push("media");
	    }	    
	}else{
	    tags.media=feature.properties.pictures_url_prefix+"media.json"
	    beautify.create.push("media");
	}
    }

 
    // add project daten to tags
    if(feature.properties.project){
	

	let project=feature.properties.project;

	if(!tags.circumference){
	    if(project.BHU!=""){
		// martin: BHU muss genau eine Zahl sein
		if(project.BHU+0==project.BHU){
		    beautify.create.push("circumference");
		    tags.circumference=project.BHU/100.0;
		    process.stderr.write("https://openstreetmap.org/"+feature.id+"\tWarnung: Das Tag \"circumference="+tags.circumference+"\" fehlt.\n")
		}
	    }
	}

	if(!tags.start_date){
	    if(project.Pflanzjahr!=""){
		// martin: Pflanzjahr muss genau eine Zahl sein
		if(project.Pflanzjahr+0==project.Pflanzjahr){
		    beautify.create.push("start_date");
		    tags.start_date=project.Pflanzjahr;
		    process.stderr.write("https://openstreetmap.org/"+feature.id+"\tWarnung: Das Tag \"start_date="+tags.start_date+"\" fehlt.\n");
		    //console.log("JAHR"+project.Pflanzjahr+" "+tags.start_date);
		}
	    }
	}

	/*
	propagation=[natural|sucker|planted|seed|graft]
	propagation:parent=[openstreetmap/node/xxxxxxxxxx|local|alien]
	propagation:variety=var1,var2,....
	propagation:rootstock=rootstock
	*/
        /*
	function vermehrungstypToPropagation(vermehrungstyp){
	    return answer;
	}
	*/
	
	if(project.Vermehrungstyp){

	    let answer;
	    switch(project.Vermehrungstyp){
	    case "P":
		answer="planted";
		break;
	    case "N":
		answer="natural";
		break;
	    case "U":
		answer="natural";
		break;
	    case "W":
		answer="sucker";
		break;
	    case "TS":
		answer="seed";
		break;
	    case "TR":
		answer="graft";
		break;
	    default:
		answer="unknown";
		break;
	    }

	    if(answer=="unknown"){
		let dieser=feature.id;
		process.stderr.write("\tFehler: Der \"Vermehrungstyp\" in der Projektdatei vom Baum \""+dieser+"\" hat unbekannten Wert \""+answer+"\".\n");		
	    }
	    
	    if(tags["propagation"]){
		// check for wrong values
		let prop=tags.propagation;
		let vals=["natural","sucker","planted","graft","seed"]
		if(!vals.includes(prop)){
		    process.stderr.write("https://openstreetmap.org/"+feature.id+"\tFehler: Das Tag \"propagation\" hat den unbekannten Wert "+prop+".\n");
		}
		// update, if needed
		if(tags["propagation"]!=answer){
		    beautify.update.push("propagation")
		    tags["propagation"]=answer;
		}
	    }else{
		tags["propagation"]=answer;
		beautify.create.push("propagation")
	    }   
	}

	
	if(project.Herkunft!=""){
	    if(tags["propagation:parent"]){
		if(tags["propagation:parent"].startsWith("node/")){
		    if(!tags["propagation:parent"].endsWith(project.Herkunft.toString())){
			tags["propagation:parent"]="node/"+project.Herkunft;
			beautify.update.push("propagation:parent")
		    }
		}
	    }else{
		tags["propagation:parent"]="node/"+project.Herkunft;
		beautify.create.push("propagation:parent")
	    }
	}

	// project marker
	if(!tags["speierlingproject"]){
	    tags["speierlingproject"]="yes";
	    beautify.create.push("speierlingproject")
	}

	
        let projectArray=Object.entries(project);
	filter=["Node",
		"Check",
		"Kanton",
		"PLZ",
		"Ort",
		"Vermehrungstyp",
		"Herkunft",
		"Pflanzjahr",
		"Lat-WGS84",
		"Lon-WGS84",
		"CHY-LV95",
		"CHX-LV95",
		"BHU",
		"BHD"
	       ];

	projectArray.forEach( ([key,value]) => {
	    if(value!=""){
		if(!(filter.includes(key))){
		    let tag="speierlingproject:"+key.toLowerCase();
		    if(tags[tag]){
			if(tags[tag]!=value){
			    beautify.update.push(tag);
			    tags[tag]=value;	
			}
		    }else{
			tags[tag]=value;
			beautify.create.push(tag)
		    }
		}
	    }
	});
	
	
//////////////////////////////////////////////////////////////////////////////////////////////
	
	//to be removed -> new tag projektspeierling:gebiet
	if(project.Ort)ort=project.Ort;
	if(project.Gebiet)gebiet=project.Ort;

	if(project.Gebiet!=""){
	    if(tags["addr:area"]){
		if(tags["addr:area"]!=project.Gebiet){
		    beautify.update.push("addr:area")
		    tags["addr:area"]=location.area;
		}
	    }else{
		tags["addr:area"]=project.Gebiet;
		beautify.create.push("addr:area")
	    }   
	}
	

    }
        
    // add location (from nominatim and projekt)
    let address=feature.properties.nominatim.address;
    let addrArray=Object.entries(address);

    addrArray.forEach( ([key,value]) => {
	if(!( key=="postcode" || key.indexOf("ISO")!=-1) ){
	    //console.log(`$key $value`);
	    let tag="addr:"+key;
	    if(tags[tag]){
		if(tags[tag]!=value){
		    beautify.update.push(tag);
		    tags[tag]=value;	
		}
	    }else{
		tags[tag]=value;
		beautify.create.push(tag)
	    }
    }
    });
    if(feature.properties.nominatim.display_name){
	let value=feature.properties.nominatim.display_name;
	let tag="addr:full";
	if(tags[tag]){
	    if(tags[tag]!=value){
		beautify.update.push(tag);
		tags[tag]=value;	
	    }
	}else{
	    tags[tag]=value;
	    beautify.create.push(tag)
	}
    }

    // to be removed
    if(ort==""){
	if(address.village){ort=address.village;}else
	if(address.town){ort=address.town;}else
        if(address.city){ort=address.city;}else
	if(address.municipality){ort=address.municipality;}
    }

    let kanton;
    if(address.state){kanton=address.state}else
    if(address.province){kanton=address.province}else
    if(address.county){kanton=address.county}else{kanton=""}
    
    
    let land=address.country
    if(land=="Schweiz/Suisse/Svizzera/Svizra")land="Schweiz";

    // add location
    feature.properties.location={};

    location=feature.properties.location;
    if(gebiet!="")location.area=gebiet;
    location.place=ort;
    location.state=kanton;
    location.country=land;
    //end removed
    
    return feature
}


/// goes to karte.js
function repairTags(geojson){

    /////////////////////////////////////////
    /////     clean and update tags     /////
    /////////////////////////////////////////

    for(let i=0;i<geojson.features.length;i++){
	let tags=geojson.features[i].properties.tags;

	if(tags.planted_date&&!tags.start_date){
           tags.start_date=tags.planted_date;
	   delete tags.planted_date;
        }
	//clean tags
	if(tags.start_date){
	    if(tags.start_date.toString().startsWith("~")){
		tags.start_date=tags.start_date.slice(1);
	    }
	    if(tags.start_date.toString().indexOf("-")!=-1){
		tags.start_date=tags.start_date.split("-")[0];
	    }
	}
	// circumference is in meters nit cm
	if(tags.circumference){
	    if(tags.circumference>10){
		//beautify.update.push("circumference");
		tags.circumference/=100.0;
	    }
	}
	
    }
    return geojson;
}

    
function beautify(geojson){

    geojson.features.forEach( (feature) => { feature=beautifyFeature(feature); } );

    return geojson;   
}


function processGeojson(geoIn){

    // check for Herkunft
    let indexed={};
    for(let i=0;i<geoIn.features.length;i++){
	let feature=geoIn.features[i];
	indexed[feature.properties.id]=feature; 
    }
    for(let i=0;i<geoIn.features.length;i++){
	let feature=geoIn.features[i];
	if(feature.properties.project&&feature.properties.project.Herkunft!=""){
	    let parent=feature.properties.project.Herkunft;
	    let dieser=feature.properties.id;
	    if(!indexed[parent]){
      process.stderr.write("Warnung: Die \"Herkunft\" in der Projektdatei vom Baum \""+dieser+"\" mit dem Wert \""+parent+"\" existiert nicht.\n");		
	    }    
	}
    }
    //end check
	    
    let geoOut=repairTags(beautify(geoIn));

    process.stdout.write(JSON.stringify(geoOut,null,2)+'\n');	    
}



var chunks = '';
process.stdin.on('readable', () => {
  let chunk;
  while (null !== (chunk = process.stdin.read())) {
      chunks+=chunk;
  }
});
process.stdin.on('end', () => {
    processGeojson(JSON.parse(chunks))
});



/*
// is now on karte.js !!!!!
function addParent(geojson){

    let indexed= {};

    // add featureIndex
    for(let i=0;i<geojson.features.length;i++){
	let feature=geojson.features[i];
	feature.featureIndex=i; 
    }

    // make indexOpbject
    for(let i=0;i<geojson.features.length;i++){
	let feature=geojson.features[i];
	indexed[feature.id]=feature; 
    }

    // make parentIndex;
    for(let i=0;i<geojson.features.length;i++){
	let feature=geojson.features[i];
	if(feature.properties.tags["propagation:parent"]){
	    let parent=feature.properties.tags["propagation:parent"];
	    if(indexed[parent]){
		let parentIndex=indexed[parent].featureIndex;
		feature.properties.parentIndex=parentIndex;
		feature.properties.parentFeature=indexed[parent];
	    }    
	}
    }
    return geojson;
}

// is now on karte.js

function getRelationGeojson(geojson){

    let relationGeojson= { type: "featureCollection", features: [] };
    
    for(let i=0;i<geojson.features.length;i++){
	let feature=geojson.features[i];

	if(feature.properties.parentIndex){
	    let parentIndex=feature.properties.parentIndex;
	    
	    let coords=feature.geometry.coordinates;
	    let pCoords=geojson.features[parentIndex].geometry.coordinates;	    

	    let item={ "type": "Feature",
		       "properties": {},
		       "geometry": {
			      "type": "LineString",
			      "coordinates": [ pCoords, coords ]
		       }
		     };
	    relationGeojson.features.push(item);
	}
    }
    return relationGeojson;
}
*/				     


    // round elvation
    /*
    if(feature.geometry.coordinates[2]){
	if(feature.geometry.coordinates[2].toString().indexOf(".")!=-1){
	    feature.geometry.coordinates[2]=Math.round(feature.geometry.coordinates[2]);
	    beautify.update.push("coordinates");
	}
    }
    */


    /*
    propagation=[natural|planted] 
    propagation:type=[seed|graft|sucker] (implies: seed,graft => propagation=planted; sucker => propagation=natural)
    propagation:parent=[openstreetmap/node/xxxxxxxxxx|local|alien] (implies => propagation=planted)
    propagation:variety=[var1,var2,....] (implies => propagation=planted;propagation:type=graft)
   
	if(project.Vermehrungstyp){
	    switch(project.Vermehrungstyp){
	    case "N":
		tags["propagation"]="natural";
		break;
	    case "U":
		tags["propagation"]="planted";
		break;
	    case "TS":
		tags["propagation"]="planted";
		tags["propagation:type"]="seed";
		if(project.Herkunft!="")tags["propagation:parent"]="openstreetmap.org/node/"+project.Herkunft;
		break;
	    case "TR":
		tags["propagation"]="planted";
		tags["propagation:type"]="graft";
		if(project.Herkunft!="")tags["propagation:parent"]="openstreetmap.org/node/"+project.Herkunft;	    
		break;
	    default: break;
	    }
	}
        */

 /*
    if(tags.propagation){
	if(tags.propagation!="natural"||tags.propagation!="planted"){delete tags.propagation}
    }

    //add propagation implicits
    if(tags["propagation:type"]){
	if(!tags["propagation"]){
	    switch(tags["propagation:type"]){
	    case "sucker":
		tags["propagation"]="natural";
		break;
	    case "seed":
	    case "graft":
		tags["propagation"]="planted"
		break;
	    default:
		break;
	    }
	}
    }

    if(tags["propagation:parent"]){
	if(!tags["propagation"]){
	    tags["propagation"]="planted";
	}
    }
	
    if(tags["propagation:variety"]){
	if(!tags["propagation"]){
	    tags["propagation"]="planted";
	}
	if(!tags["propagation:type"]){
	    tags["propagation:type"]="graft";
	}
    }
    */


/*
const fs = require('fs');
function read(name){
    return fs.readFileSync(name,{encoding:'utf8', flag:'r'});
}
function write(name,data){
    fs.writeFileSync(name,data,{encoding:'utf8', flag:'w'});
}

const { execSync } = require('child_process');
function shell(command){
    //console.log(args);
    let opts= { encoding: 'utf8' };
    return execSync(command,[], opts);
}
*/
