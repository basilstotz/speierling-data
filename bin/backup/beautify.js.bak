#!/usr/bin/env node


function beautify(feature){

    let gebiet="";
    let ort="";

    // round elvation
    if(feature.geometry.coordinates[2]){
	feature.geometry.coordinates[2]=Math.round(feature.geometry.coordinates[2]);
    }

    
    /////////////////////////////////////////
    /////     clean and update tags     /////
    /////////////////////////////////////////
    
    let tags=feature.properties.tags;

    //clean tags
    if(tags.start_date){
	if(tags.start_date.startsWith("~"))tags.start_date=tags.start_date.slice(1);
	if(tags.start_date.indexOf("-")!=-1)tags.start_date=tags.start_date.split("-")[0];
	//console.log(tags.start_date);
    }

    // circumference is in meters nit cm
    if(feature.properties.tags.circumference){
	if(feature.properties.tags.circumference>6)feature.properties.tags.circumference/=100.0;
    }
    
    /*
    propagation=[natural|sucker|planted|seed|graft]
    propagation:parent=[openstreetmap/node/xxxxxxxxxx|local|alien]
    propagation:variety=var1,var2,....
    propagation:rootstock=rootstock

    propagation=[natural|planted] 
    propagation:type=[seed|graft|sucker] (implies: seed,graft => propagation=planted; sucker => propagation=natural)
    propagation:parent=[openstreetmap/node/xxxxxxxxxx|local|alien] (implies => propagation=planted)
    propagation:variety=[var1,var2,....] (implies => propagation=planted;propagation:type=graft)
    */

    if(tags["propagation:variety"]){
	if(!tags["propagation"]){
	    tags["propagation"]="graft";
	}
    }
    
    /*
    if(tags.propagation){
	if(tags.propagation!="natural"||tags.propagation!="planted"){delete tags.propagation}
    }

    //add propagation implicits
    if(tags["propagation:type"]){
	if(!tags["propagation"]){
	    switch(tags["propagation:type"]){
	    case "sucker":
		tags["propagation"]="natural";
		break;
	    case "seed":
	    case "graft":
		tags["propagation"]="planted"
		break;
	    default:
		break;
	    }
	}
    }

    if(tags["propagation:parent"]){
	if(!tags["propagation"]){
	    tags["propagation"]="planted";
	}
    }
	
    if(tags["propagation:variety"]){
	if(!tags["propagation"]){
	    tags["propagation"]="planted";
	}
	if(!tags["propagation:type"]){
	    tags["propagation:type"]="graft";
	}
    }
    */
	
    // add project daten to tags
    if(feature.properties.project){
	let project=feature.properties.project;

	if(!tags.circumference){
	    if(project.BHU!=""){
		// martin: BHU muss genau eine Zahl sein
		if(project.BHU+0==project.BHU){
		   tags.circumference=project.BHU/100.0;
		    //console.log("BHU"+project.BHU+" "+tags.circumference)
		}
	    }
	}

	if(!tags.start_date){
	    if(project.Pflanzjahr!=""){
		// martin: Pflanzjahr muss genau eine Zahl sein
		if(project.Pflanzjahr+0==project.Pflanzjahr){
		    tags.start_date=project.Pflanzjahr;
		    //console.log("JAHR"+project.Pflanzjahr+" "+tags.start_date);
		}
	    }
	}

	/*
	if(project.Vermehrungstyp){
	    switch(project.Vermehrungstyp){
	    case "N":
		tags["propagation"]="natural";
		break;
	    case "U":
		tags["propagation"]="planted";
		break;
	    case "TS":
		tags["propagation"]="planted";
		tags["propagation:type"]="seed";
		if(project.Herkunft!="")tags["propagation:parent"]="openstreetmap.org/node/"+project.Herkunft;
		break;
	    case "TR":
		tags["propagation"]="planted";
		tags["propagation:type"]="graft";
		if(project.Herkunft!="")tags["propagation:parent"]="openstreetmap.org/node/"+project.Herkunft;	    
		break;
	    default: break;
	    }
	}
        */

	if(project.Vermehrungstyp){
	    switch(project.Vermehrungstyp){
	    case "P":
		tags["propagation"]="planted";
		break;
	    case "N":
		tags["propagation"]="natural";
		break;
	    case "U":
		tags["propagation"]="natural";
		break;
	    case "S":
		tags["propagation"]="sucker";
		if(project.Herkunft!="")tags["propagation:parent"]="openstreetmap.org/node/"+project.Herkunft;		
		break;
	    case "TS":
		tags["propagation"]="seed";
		if(project.Herkunft!="")tags["propagation:parent"]="openstreetmap.org/node/"+project.Herkunft;
		break;
	    case "TR":
		tags["propagation"]="graft";
		if(project.Herkunft!="")tags["propagation:parent"]="openstreetmap.org/node/"+project.Herkunft;	    
		break;
	    default: break;
	    }
	}

	
	//if(project.Kanton)kanton=project.Kanton;
	if(project.Ort)ort=project.Ort;
	if(project.Gebiet)gebiet=project.Gebiet;
	
    }

    // add location (from nominatim and projekt)
    let address=feature.properties.nominatim.address;
    
    if(ort==""){
	if(address.village){ort=address.village;}else
	if(address.town){ort=address.town;}else
        if(address.city){ort=address.city;}else
	if(address.municipality){ort=address.municipality;}
    }

    let kanton;
    if(address.state){kanton=address.state}else
    if(address.province){kanton=address.province}else
    if(address.county){kanton=address.county}else{kanton=""}
    
    
    let land=address.country
    if(land=="Schweiz/Suisse/Svizzera/Svizra")land="Schweiz";

    // add location
    feature.properties.location={};

    location=feature.properties.location;
    if(gebiet!="")location.area=gebiet;
    location.place=ort;
    location.state=kanton;
    location.country=land;
    
    //return
    return feature
}


function processGeojson(geoIn){

    var geoOut={ type: "FeatureCollection", features: [] };

    geoIn.features.forEach(
	(feature) => { geoOut.features.push(beautify(feature)) }
    );

    process.stdout.write(JSON.stringify(geoOut,null,2)+'\n');	    
}

var chunks = '';

process.stdin.on('readable', () => {
  let chunk;
  while (null !== (chunk = process.stdin.read())) {
      chunks+=chunk;
  }
});

process.stdin.on('end', () => {
    processGeojson(JSON.parse(chunks))
});


/*
const fs = require('fs');
function read(name){
    return fs.readFileSync(name,{encoding:'utf8', flag:'r'});
}
function write(name,data){
    fs.writeFileSync(name,data,{encoding:'utf8', flag:'w'});
}

const { execSync } = require('child_process');
function shell(command){
    //console.log(args);
    let opts= { encoding: 'utf8' };
    return execSync(command,[], opts);
}
*/
